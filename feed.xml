<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-12-11T06:21:59+05:30</updated><id>http://localhost:4000/</id><title type="html">The C++ Student</title><subtitle>I'm just a student who wants to delve deeper into the world of Computing, with C++ as my base. I'll be posting quite often from now on, so stay tuned!
</subtitle><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><entry><title type="html">Introduction to reversing</title><link href="http://localhost:4000/ethical-hacking/2017/12/11/assembly/" rel="alternate" type="text/html" title="Introduction to reversing" /><published>2017-12-11T00:30:00+05:30</published><updated>2017-12-11T00:30:00+05:30</updated><id>http://localhost:4000/ethical-hacking/2017/12/11/assembly</id><content type="html" xml:base="http://localhost:4000/ethical-hacking/2017/12/11/assembly/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#reversing&quot; id=&quot;markdown-toc-reversing&quot;&gt;Reversing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#assembly&quot; id=&quot;markdown-toc-assembly&quot;&gt;Assembly&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#basics-of-assembly&quot; id=&quot;markdown-toc-basics-of-assembly&quot;&gt;Basics of Assembly&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#basic-execution-envrionment&quot; id=&quot;markdown-toc-basic-execution-envrionment&quot;&gt;Basic Execution Envrionment&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#overview&quot; id=&quot;markdown-toc-overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#data-types&quot; id=&quot;markdown-toc-data-types&quot;&gt;Data Types&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#how-privelege-separation-works&quot; id=&quot;markdown-toc-how-privelege-separation-works&quot;&gt;How Privelege Separation Works&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#registers&quot; id=&quot;markdown-toc-registers&quot;&gt;Registers&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#further-reading&quot; id=&quot;markdown-toc-further-reading&quot;&gt;Further Reading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reversing&quot;&gt;Reversing&lt;/h2&gt;

&lt;p&gt;I assume that most readers of this blog think that “Hacking” basically means “hacking websites”. While that &lt;em&gt;is&lt;/em&gt; a subset of hacking, (and sometimes, &lt;em&gt;ethical&lt;/em&gt; hacking) it isn’t the only think that hackers do (I should know, since I aspire to be an ethical hacker someday).&lt;/p&gt;

&lt;p&gt;We also delve into the bits sometimes, to find &lt;em&gt;other&lt;/em&gt; kinds of vulnerabilities (like this one which got patched after 16+ years).&lt;/p&gt;

&lt;p&gt;The art of understanding the assembly code generated from all that pesky code you write everyday and finding flaws in it, flaws you can &lt;em&gt;exploit&lt;/em&gt; to do some serious damage is called &lt;em&gt;Reverse Engineering&lt;/em&gt;, or, more colloquially, &lt;em&gt;reversing&lt;/em&gt; (This is one thing you don’t see many script kiddies doing, guys).&lt;/p&gt;

&lt;h2 id=&quot;assembly&quot;&gt;Assembly&lt;/h2&gt;

&lt;p&gt;Ah, Assembly. Good ol’ assembly that &lt;em&gt;practically no one understood&lt;/em&gt; back in High School. That language which is present in every damn programming course, and yet, absent.&lt;/p&gt;

&lt;p&gt;Okay, let’s quickly generate some assembly code out of some basic program, shall we?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Dump of assembler code for function main:
   0x0000000000400776 &amp;lt;+0&amp;gt;:	push   %rbp
   0x0000000000400777 &amp;lt;+1&amp;gt;:	mov    %rsp,%rbp
=&amp;gt; 0x000000000040077a &amp;lt;+4&amp;gt;:	mov    $0x400874,%esi
   0x000000000040077f &amp;lt;+9&amp;gt;:	mov    $0x601060,%edi
   0x0000000000400784 &amp;lt;+14&amp;gt;:	callq  0x400660 &amp;lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@plt&amp;gt;
   0x0000000000400789 &amp;lt;+19&amp;gt;:	mov    $0x0,%eax
   0x000000000040078e &amp;lt;+24&amp;gt;:	pop    %rbp
   0x000000000040078f &amp;lt;+25&amp;gt;:	retq
End of assembler dump.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Woah, what &lt;em&gt;was&lt;/em&gt; I thinking? 
Let’s backtrack a bit.&lt;/p&gt;

&lt;h3 id=&quot;basics-of-assembly&quot;&gt;Basics of Assembly&lt;/h3&gt;

&lt;p&gt;There are two main syntaxes (or should I say, &lt;em&gt;styles&lt;/em&gt;) of Assembly. They are the&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Intel Syntax&lt;/li&gt;
  &lt;li&gt;AT&amp;amp;T Syntax (To any US readers, yes, this is the telephone company)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what is really &lt;em&gt;necessary&lt;/em&gt; to know is that the two syntaxes differ in how they declare variables.
In Intel’s syntax, the variables are all type defined based on their values. 
In AT&amp;amp;T’s syntax, &lt;em&gt;registers&lt;/em&gt; are prefixed with a “%” sign, and &lt;em&gt;immediates&lt;/em&gt; (like addresses and values) are prefixed with a “$”.&lt;/p&gt;

&lt;p&gt;Based on this info, you would be right if you said that the code I gave above was in the AT&amp;amp;T Syntax.&lt;/p&gt;

&lt;p&gt;(All the information given hereof will be from the Intel® 64 and IA-32 Architectures
Software Developer’s Manual, available &lt;a href=&quot;https://software.intel.com/en-us/articles/intel-sdm&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;basic-execution-envrionment&quot;&gt;Basic Execution Envrionment&lt;/h3&gt;

&lt;p&gt;A processor basically has two modes that are of importance here: &lt;strong&gt;protected&lt;/strong&gt; and &lt;strong&gt;real-address&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Protected Mode - Protected mode basically runs real-address mode, but in a protected, multi-tasking environment. Remember those very helpful &lt;code class=&quot;highlighter-rouge&quot;&gt;SIGABRT&lt;/code&gt; error messages? (Poor me, I did) Yeah, that’s basically technospeak for “You better be happy I’m here to make sure your PC didn’t fry becuase of &lt;em&gt;your&lt;/em&gt; stupid antics”. This is becuase your Intel® PC uses Protected mode all the time. In fact, it’s the default mode.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Real-address mode - This is the programming environment of the Intel® 8086 processor.
Again, that’s techno-speak for “how that particular processor worked”. Why that one processor, you ask? It’s the first one that used it. &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_8086&quot;&gt;As simple as that&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there’s the &lt;strong&gt;compatibility mode&lt;/strong&gt; of Intel® x64 (64-bit) processors, which allows us to install versions of Windows® we’re not allowed to, normally.&lt;/p&gt;

&lt;h4 id=&quot;overview&quot;&gt;Overview&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;Any program or task running on an IA-32 processor is given a set of resources for executing instructions and for storing code, data, and state information. These resources make up the basic execution environment for an IA-32 processor.
An Intel 64 processor supports the basic execution environment of an IA-32 processor, and a similar environment under IA-32e mode that can execute 64-bit programs (64-bit sub-mode) and 32-bit programs (compatibility sub-mode).
The basic execution environment is used jointly by the application programs and the operating system or executive
running on the processor.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Intel® 64 and IA-32 Architectures
Software Developer’s Manual&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are quite a few important things in this section, namely:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Address space — Any task or program running on an IA-32 processor can address a linear address space of
up to 4 GBytes (2 32 bytes) and a physical address space of up to 64 GBytes (2 36 bytes).&lt;/li&gt;
  &lt;li&gt;Basic program execution registers — The eight general-purpose registers, the six segment registers, the EFLAGS register, and the EIP (instruction pointer) register comprise a basic execution environment in which to execute a set of general-purpose instructions. These instructions perform basic integer arithmetic on byte, word, and doubleword integers, handle program flow control, operate on bit and byte strings, and address
memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/assembly-1/1.png&quot; alt=&quot;overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll be doing both of them shortly. Just remember that these registers are the same as the keywords with prefixes “$” in the code shown before.&lt;/p&gt;

&lt;h4 id=&quot;data-types&quot;&gt;Data Types&lt;/h4&gt;
&lt;p&gt;There is no requirement to know what types there are, since there are quite a few, and you can always look them up.&lt;/p&gt;

&lt;p&gt;The one thing that I like about the AT&amp;amp;T Syntax is that they always show what data types you’re working on, and the differences between registers and memory locations are clearly demarcated.&lt;/p&gt;

&lt;p&gt;Since I am not too good at explaining it, I will be linking this here: &lt;a href=&quot;http://www.c-jump.com/CIS77/ASM/DataTypes/lecture.html&quot;&gt;Lecture Notes&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-privelege-separation-works&quot;&gt;How Privelege Separation Works&lt;/h4&gt;
&lt;p&gt;In x86 (The most used processor), Privelege Separation is abstracted through what’s called &lt;em&gt;ring level&lt;/em&gt;. The processor supports four ring levels, numbered 0 to 3. Here, Ring 0 is the highest previlege and the system runs on that mode. Ring 3 is the lowest one, and normal users run in there.&lt;/p&gt;

&lt;h4 id=&quot;registers&quot;&gt;Registers&lt;/h4&gt;

&lt;p&gt;There are eight registers that you &lt;em&gt;have&lt;/em&gt; to know, called &lt;em&gt;General Purpose Registers&lt;/em&gt;, or &lt;em&gt;GPRs&lt;/em&gt;.
They are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EBX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ECX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EDX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EDI&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ESI&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EBP&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ESP&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that Registers are actually case-insensitive, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;EAX&lt;/code&gt; you saw just now is the same as the &lt;code class=&quot;highlighter-rouge&quot;&gt;eax&lt;/code&gt; that was in the code I showed you at the start.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://insecure.org/stf/smashstack.html&quot;&gt;Smashing The Stack For Fun And Profit&lt;/a&gt; - A classic from the e-zine Phrack, this was apparently the prime motivation to get into reversing for one of my mentors when I was at Amrita, in a workshop.&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="cpp" /><summary type="html"></summary></entry><entry><title type="html">Some Changes</title><link href="http://localhost:4000/important/2017/12/06/some-changes/" rel="alternate" type="text/html" title="Some Changes" /><published>2017-12-06T00:30:00+05:30</published><updated>2017-12-06T00:30:00+05:30</updated><id>http://localhost:4000/important/2017/12/06/some-changes</id><content type="html" xml:base="http://localhost:4000/important/2017/12/06/some-changes/">&lt;p&gt;&lt;strong&gt;I think that what I’ve been doing until now in this blog is wrong.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I believe that there must be change: and here’s how I will bring it.&lt;/p&gt;

&lt;p&gt;I’ll be re running through all of my previous blog posts and edit them to be to-the-point, and informative, and even if you knew the theory already, I’ll make sure that you’ll leave this site with something new learnt.&lt;/p&gt;

&lt;p&gt;I’ll spend the whole week on this one.&lt;/p&gt;

&lt;p&gt;Also, I’m kinda interested in more languages, and I’ve been working behind-the-scenes on bringing more languages and more interesting stuff into this blog.&lt;/p&gt;

&lt;p&gt;I’ll also be posting once a week. It’ll always be a fully-fledged tutorial from now on, no part-by-part stuff.&lt;/p&gt;

&lt;p&gt;Thanks for supporting me through this journey, I hope this only makes it better for everybody since I can then make meaningful content once a week instead on having to rely on writing unimportant stuff every day.&lt;/p&gt;

&lt;p&gt;Please let me in the comments about what you think about this.&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="important" /><summary type="html"></summary></entry><entry><title type="html">Introduction to forensics - 2</title><link href="http://localhost:4000/image-manipulation/2017/11/28/forensics/" rel="alternate" type="text/html" title="Introduction to forensics - 2" /><published>2017-11-28T00:30:00+05:30</published><updated>2017-11-28T00:30:00+05:30</updated><id>http://localhost:4000/image-manipulation/2017/11/28/forensics</id><content type="html" xml:base="http://localhost:4000/image-manipulation/2017/11/28/forensics/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#yesterdays-answer&quot; id=&quot;markdown-toc-yesterdays-answer&quot;&gt;Yesterday’s Answer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#todays-question&quot; id=&quot;markdown-toc-todays-question&quot;&gt;Today’s Question:&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#introducing-binwalk&quot; id=&quot;markdown-toc-introducing-binwalk&quot;&gt;Introducing Binwalk&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#steganography&quot; id=&quot;markdown-toc-steganography&quot;&gt;Steganography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;yesterdays-answer&quot;&gt;Yesterday’s Answer&lt;/h2&gt;
&lt;p&gt;If you had used any hex editor to peek into the hexadecimal code behind yesterday’s “pdf” file, you’d have noticed that it isn’t an actual PDF, just a PNG file renamed and called PDF.&lt;/p&gt;

&lt;h2 id=&quot;todays-question&quot;&gt;Today’s Question:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;/assets/forensics-2/abcd.pdf&quot;&gt;This&lt;/a&gt; is the problem file.&lt;/p&gt;

&lt;p&gt;You need to find the same old &lt;a href=&quot;/assets/forensics-1/problem.png&quot;&gt;problem.png&lt;/a&gt; again.&lt;/p&gt;

&lt;p&gt;You might already know that I’d have tinkered with the file name in some way, so you’d probably name it &lt;code class=&quot;highlighter-rouge&quot;&gt;abcd.png&lt;/code&gt; or something.&lt;/p&gt;

&lt;p&gt;What now? You can’t find &lt;code class=&quot;highlighter-rouge&quot;&gt;problem.png&lt;/code&gt; anywhere, and the file size is actually BIGGER than the &lt;code class=&quot;highlighter-rouge&quot;&gt;dandelion.png&lt;/code&gt; that I use on my site.&lt;/p&gt;

&lt;h3 id=&quot;introducing-binwalk&quot;&gt;Introducing Binwalk&lt;/h3&gt;

&lt;p&gt;Binwalk is a UNIX-based application (sorry, Windows users!) that tries to find relevant file signatures in files. For example, on &lt;code class=&quot;highlighter-rouge&quot;&gt;abcd.pdf&lt;/code&gt;, this is what it gives:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;binwalk abcd.pdf

DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             PNG image, 558 x 496, 8-bit/color RGB, non-interlaced
81            0x51            Zlib compressed data, best compression
194072        0x2F618         PNG image, 640 x 400, 8-bit/color RGBA, non-interlaced

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So you now know that there are two PNG images, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;binwalk -e&lt;/code&gt; and extract them. There, you have your &lt;code class=&quot;highlighter-rouge&quot;&gt;problem.png&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;steganography&quot;&gt;Steganography&lt;/h2&gt;

&lt;p&gt;Steganography is (arguably) what I have been doing right now. It is the art of hiding information in files, where you’ll only get it if you search hard for it.&lt;/p&gt;

&lt;p&gt;Here’s a &lt;a href=&quot;/assets/forensics-2/the_nod.gif&quot;&gt;GIF&lt;/a&gt; from sCTF 2015 that is actually very easy, you just have to find a text string that has “flag” in it (this is a common recurrence in all CTFs).&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="ethical-hacking" /><summary type="html"></summary></entry><entry><title type="html">Introduction to forensics</title><link href="http://localhost:4000/image-manipulation/2017/11/28/forensics/" rel="alternate" type="text/html" title="Introduction to forensics" /><published>2017-11-28T00:30:00+05:30</published><updated>2017-11-28T00:30:00+05:30</updated><id>http://localhost:4000/image-manipulation/2017/11/28/forensics</id><content type="html" xml:base="http://localhost:4000/image-manipulation/2017/11/28/forensics/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#so-what-is-forensics&quot; id=&quot;markdown-toc-so-what-is-forensics&quot;&gt;So, What is Forensics?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so-what-is-forensics&quot;&gt;So, What is Forensics?&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;Computer forensics (also known as computer forensic science) is a branch of digital forensic science pertaining to evidence found in computers and digital storage media. The goal of computer forensics is to examine digital media in a forensically sound manner with the aim of identifying, preserving, recovering, analyzing and presenting facts and opinions about the digital information. - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So basically, you try to find information that wasn’t found before by anyone else but other people would most definitely have tried to find information. Therefore, we need to closely examine what the bad guys might be doing. Most people who do forensics need to have a lot of information about a lot of subjects, and that’s particularly what makes it interesting to me.&lt;/p&gt;

&lt;p&gt;Let’s start with a simple enough example. 
&lt;a href=&quot;/assets/forensics-1/problem.pdf&quot;&gt;This&lt;/a&gt; is a file you have to crack.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/forensics-1/problem.png&quot; alt=&quot;this&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is what you’re supposed to get.&lt;/p&gt;

&lt;p&gt;You have a day to do this.&lt;/p&gt;

&lt;p&gt;Some resources that you’ll probably need:
Hex Editors:
&lt;a href=&quot;http://hexedit.com/&quot;&gt;HexEdit - For Windows&lt;/a&gt;
&lt;a href=&quot;https://apps.ubuntu.com/cat/applications/precise/bless/&quot;&gt;Bless - For Ubuntu (and equivalent)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;File signatures (these help you understand what file format you’re dealing with)
https://www.garykessler.net/library/file_sigs.html
https://en.wikipedia.org/wiki/List_of_file_signatures&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="ethical-hacking" /><summary type="html"></summary></entry><entry><title type="html">IOCCC (1985)</title><link href="http://localhost:4000/c/2017/11/17/IOCCC3/" rel="alternate" type="text/html" title="IOCCC (1985)" /><published>2017-11-17T00:30:00+05:30</published><updated>2017-11-17T00:30:00+05:30</updated><id>http://localhost:4000/c/2017/11/17/IOCCC3</id><content type="html" xml:base="http://localhost:4000/c/2017/11/17/IOCCC3/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#lycklamac&quot; id=&quot;markdown-toc-lycklamac&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lycklama.c&lt;/code&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#analysing-the-code-and-removing-some-obfuscation&quot; id=&quot;markdown-toc-analysing-the-code-and-removing-some-obfuscation&quot;&gt;Analysing the code, and removing some obfuscation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#decoding-the-mess&quot; id=&quot;markdown-toc-decoding-the-mess&quot;&gt;Decoding the mess&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-copyright&quot; id=&quot;markdown-toc-the-copyright&quot;&gt;The copyright&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lycklamac&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lycklama.c&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define o define
#o ___o write
#o ooo (unsigned)
#o o_o_ 1
#o _o_ char
#o _oo goto
#o _oo_ read
#o o_o for
#o o_ main
#o o__ if
#o oo_ 0
#o _o(_,__,___)(void)___o(_,__,ooo(___))
#o __o (o_o_&amp;lt;&amp;lt;((o_o_&amp;lt;&amp;lt;(o_o_&amp;lt;&amp;lt;o_o_))+(o_o_&amp;lt;&amp;lt;o_o_)))+(o_o_&amp;lt;&amp;lt;(o_o_&amp;lt;&amp;lt;(o_o_&amp;lt;&amp;lt;o_o_)))
o_(){_o_ _=oo_,__,___,____[__o];_oo ______;_____:___=__o-o_o_; _______:
_o(o_o_,____,__=(_-o_o_&amp;lt;___?_-o_o_:___));o_o(;__;_o(o_o_,&quot;\b&quot;,o_o_),__--);
_o(o_o_,&quot; &quot;,o_o_);o__(--___)_oo _______;_o(o_o_,&quot;\n&quot;,o_o_);______:o__(_=_oo_(
oo_,____,__o))_oo _____;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the code.&lt;/p&gt;

&lt;h3 id=&quot;analysing-the-code-and-removing-some-obfuscation&quot;&gt;Analysing the code, and removing some obfuscation&lt;/h3&gt;

&lt;p&gt;Let’s analyse some of the &lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt;s made.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#o __o (o_o_&amp;lt;&amp;lt;((o_o_&amp;lt;&amp;lt;(o_o_&amp;lt;&amp;lt;o_o_))+(o_o_&amp;lt;&amp;lt;o_o_)))+(o_o_&amp;lt;&amp;lt;(o_o_&amp;lt;&amp;lt;(o_o_&amp;lt;&amp;lt;o_o_)))&lt;/code&gt;
 Let’s simplfiy this a bit more. Becuase of the &lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;o_o_&lt;/code&gt; is just &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator is the left shift operator. So this basically becomes:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#define __o (1&amp;lt;&amp;lt;((1&amp;lt;&amp;lt;(1&amp;lt;&amp;lt;1))+(1&amp;lt;&amp;lt;1)))+(1&amp;lt;&amp;lt;(1&amp;lt;&amp;lt;(1&amp;lt;&amp;lt;1)))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, because all the right shifts are just multiplying by two here, we can further simplify it as:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#define __o (1&amp;lt;&amp;lt;((1&amp;lt;&amp;lt;2)+2))+(1&amp;lt;&amp;lt;(1&amp;lt;&amp;lt;2))&lt;/code&gt;, which is the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;#define __o (1&amp;lt;&amp;lt;(4+2))+(1&amp;lt;&amp;lt;4)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, this simplifies to &lt;code class=&quot;highlighter-rouge&quot;&gt;#define __o (1&amp;lt;&amp;lt;6)+8&lt;/code&gt;, which becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;#define __o 20&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can remove all the crazy defines and make it look a bit simpler, after which it looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define _o(_,__,___)(void)write(_,__,(unsigned)(___))
main()
{
char _=0,__,___,____[20];
goto ______;
_____:___=20-1; 
_______:_o(1,____,__=(_-1&amp;lt;___?_-1:___));

for(;__;_o(1,&quot;\b&quot;,1),__--);
_o(1,&quot; &quot;,1);

if(--___)goto _______;
_o(1,&quot;\n&quot;,1);

______:

if(_=read(0,____,20))
_oo _____;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you have a keen eye, you will notice that there are three characters here, one array, and one &lt;code class=&quot;highlighter-rouge&quot;&gt;goto&lt;/code&gt;.
Now, time for me to rename some values. I’ll just call them &lt;code class=&quot;highlighter-rouge&quot;&gt;char1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;char2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;char3&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;arr&lt;/code&gt;. I’ll call the &lt;code class=&quot;highlighter-rouge&quot;&gt;goto&lt;/code&gt; label &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;. Becuase I have zero creatvity, like whatever I had done until now.&lt;/p&gt;

&lt;h3 id=&quot;decoding-the-mess&quot;&gt;Decoding the mess&lt;/h3&gt;

&lt;p&gt;This uses &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;read&lt;/code&gt;, both UNIX system commands, to print out a hello world. At least, that’s what it’s supposed to do.&lt;/p&gt;

&lt;p&gt;The “fixed” (read: changed some names) code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;sys/syscall.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#define _o(_,__,___)(void)write(_,__,(unsigned)(___))
int main()
{
char char1=0,char2,char3,arr[20];
goto label;
label2:char3=19;
label3:_o(1,arr,char2=(char1--&amp;lt;char3?char1--:char3));

for(;char2;_o(1,&quot;\b&quot;,1),char2--);
_o(1,&quot; &quot;,1);

if(--char3)goto label3;
_o(1,&quot;\n&quot;,1);

label:

if(char1=read(0,arr,20))
goto label2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Apparently, you have to give it very long lines as arguments. But based on what I can see, it will basically write the whole line again, but will be &lt;em&gt;very&lt;/em&gt; inefficient in doing so.&lt;/p&gt;

&lt;h2 id=&quot;the-copyright&quot;&gt;The copyright&lt;/h2&gt;
&lt;p&gt;Copyright (c) 1984, Landon Curt Noll.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="IOCCC" /><summary type="html"></summary></entry><entry><title type="html">IOCCC (1984) Part 2</title><link href="http://localhost:4000/c/2017/11/16/IOCCC2/" rel="alternate" type="text/html" title="IOCCC (1984) Part 2" /><published>2017-11-16T00:30:00+05:30</published><updated>2017-11-16T00:30:00+05:30</updated><id>http://localhost:4000/c/2017/11/16/IOCCC2</id><content type="html" xml:base="http://localhost:4000/c/2017/11/16/IOCCC2/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#work-in-progress&quot; id=&quot;markdown-toc-work-in-progress&quot;&gt;Work in Progress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lamanc&quot; id=&quot;markdown-toc-lamanc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;laman.c&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-copyright&quot; id=&quot;markdown-toc-the-copyright&quot;&gt;The copyright&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;work-in-progress&quot;&gt;Work in Progress&lt;/h2&gt;
&lt;p&gt;This page is a work in progress, that is, I will try to explain stuff, but I have not (yet) understood everything myself.&lt;/p&gt;

&lt;h2 id=&quot;lamanc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;laman.c&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;++&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;		&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;	&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%-4d&quot;&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;    &quot;&lt;/span&gt;		&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);}&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;	&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}}&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/*Mike		Laman*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Would ya look at this beauty.
It is absolutely awesome!
Okay, enough talking. Let’s get to work.&lt;/p&gt;

&lt;p&gt;After going through some beautification, this is what it looks like:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%-4d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;    &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*Mike Laman*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Okay, still not very comprehensible.&lt;/p&gt;

&lt;p&gt;A few points:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;This style of writing &lt;code class=&quot;highlighter-rouge&quot;&gt;main (int k, char* *l)&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;main(k , l) char* * l;&lt;/code&gt; came around because of &lt;a href=&quot;https://en.wikipedia.org/wiki/The_C_Programming_Language&quot;&gt;this book&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;faded&quot;&gt;Yes, this book and C, for that matter, is that old.&lt;/p&gt;

&lt;p&gt;Anyways, we need to modernize it.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atoi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%-4d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;    &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;putchar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*Mike Laman*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I do not know what else to do.
Discuss about it in the comments! Hopefully, I’ll gain some insight (I very well understand this code, but I don’t think there is anything else that I can do to simplify it).&lt;/p&gt;

&lt;p&gt;This might be one of those &lt;em&gt;very interesting&lt;/em&gt; tricks you can do with code.&lt;/p&gt;

&lt;p&gt;Anyways, the comment section is open for discussion.&lt;/p&gt;

&lt;h2 id=&quot;the-copyright&quot;&gt;The copyright&lt;/h2&gt;

&lt;p&gt;Copyright © 1984, Landon Curt Noll. All Rights Reserved. Permission for personal, educational or non-profit use is granted provided this this copyright and notice are included in its entirety and remains unaltered. All other uses must receive prior permission in writing from both Landon Curt Noll and Larry Bassel.&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="IOCCC" /><summary type="html"></summary></entry><entry><title type="html">IOCCC Problems - Anonymous.c (1984)</title><link href="http://localhost:4000/c/2017/11/14/IOCCC-Anonymous/" rel="alternate" type="text/html" title="IOCCC Problems - Anonymous.c (1984)" /><published>2017-11-14T00:30:00+05:30</published><updated>2017-11-14T00:30:00+05:30</updated><id>http://localhost:4000/c/2017/11/14/IOCCC-Anonymous</id><content type="html" xml:base="http://localhost:4000/c/2017/11/14/IOCCC-Anonymous/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-original-code&quot; id=&quot;markdown-toc-the-original-code&quot;&gt;The Original Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#finished-code&quot; id=&quot;markdown-toc-finished-code&quot;&gt;Finished Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-copyright&quot; id=&quot;markdown-toc-the-copyright&quot;&gt;The copyright&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;IOCCC is a contest where you get to see exactly the opposite of what you’re expected to do in your day to day life: write clear code. 
The code submitted here is sometimes overwhelming, and I’ll try to make sense of it.&lt;/p&gt;

&lt;h2 id=&quot;the-original-code&quot;&gt;The Original Code&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int i;
main()
{
for(;i[&quot;]&amp;lt;i;++i)
{--i;}&quot;];read('-'-'-',i+++&quot;hell\
o, world!\n&quot;,'/'/'/'));}read(j,i,p){write(j/p+p,i---j,i/i);}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A couple of things here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;using just &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; was a valid thing until standardization came along. You can still use it: it is automatically assumed to be int.&lt;/li&gt;
  &lt;li&gt;int i is globally declared, and henceforth is equal to zero.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, that &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; function which has three parameters looks like it could be easily simplified:
&lt;code class=&quot;highlighter-rouge&quot;&gt;'-' - '-'&lt;/code&gt; is equal to zero, since we’re actually doing a subtraction of two &lt;code class=&quot;highlighter-rouge&quot;&gt;char&lt;/code&gt;s, and it is implicitly assigned to &lt;code class=&quot;highlighter-rouge&quot;&gt;int&lt;/code&gt;.
Similarly &lt;code class=&quot;highlighter-rouge&quot;&gt;'/'/'/'&lt;/code&gt; is 1.&lt;/p&gt;

&lt;p&gt;So, if we rewrite it and introduce proper formatting, we have:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int i;
int main()
{
for(;i[&quot;]&amp;lt;i;++i){--i;}&quot;];
read(0,i+++&quot;hell\o, world!\n&quot;,1));
} 
read(j,i,p)
{
write(j/p+p,i---j,i/i);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also note that &lt;code class=&quot;highlighter-rouge&quot;&gt;i[&quot;]&amp;lt;i;++i){--i;}&quot;]&lt;/code&gt; is actually a array of characters initialized as a string.&lt;/p&gt;

&lt;p&gt;Now, &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; is a Unix system call, and what it does is similar to the &lt;a href=&quot;http://www.cplusplus.com/reference/cstring/memset/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt;&lt;/a&gt; function, i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;memset(0,i,1)&lt;/code&gt; and since &lt;em&gt;that’s&lt;/em&gt; in a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, it basically takes &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; (the array of characters mentioned before) and assigns each element of &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; with data from the &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop, i.e. the hello world code.&lt;/p&gt;

&lt;p&gt;More explanations will come as soon as I understand them. 
A person on discord helped a lot to understand this code. I thank him here..&lt;/p&gt;

&lt;h2 id=&quot;finished-code&quot;&gt;Finished Code&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;unistd.h&amp;gt;
int i;
int main()
{
for(;i[&quot;]&amp;lt;i;++i){--i;}&quot;];
write(0,i+++&quot;hell\o, world!\n&quot;,1));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-copyright&quot;&gt;The copyright&lt;/h2&gt;
&lt;p&gt;Copyright (c) 1984, Landon Curt Noll.
All Rights Reserved.  Permission for personal, educational or non-profit use is
granted provided this this copyright and notice are included in its entirety
and remains unaltered.  All other uses must receive prior permission in writing
from both Landon Curt Noll and Larry Bassel.&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="IOCCC" /><summary type="html"></summary></entry><entry><title type="html">Introduction to Algorithms - Chapter 2 (Part 2)</title><link href="http://localhost:4000/study/notes/2017/10/17/Chap2Part2/" rel="alternate" type="text/html" title="Introduction to Algorithms - Chapter 2 (Part 2)" /><published>2017-10-17T00:30:00+05:30</published><updated>2017-10-17T00:30:00+05:30</updated><id>http://localhost:4000/study/notes/2017/10/17/Chap2Part2</id><content type="html" xml:base="http://localhost:4000/study/notes/2017/10/17/Chap2Part2/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#analysis-of-algorithms&quot; id=&quot;markdown-toc-analysis-of-algorithms&quot;&gt;Analysis of Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#analysis-of-insertion-sort&quot; id=&quot;markdown-toc-analysis-of-insertion-sort&quot;&gt;Analysis of Insertion Sort&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#finding-time-taken-in-best-case&quot; id=&quot;markdown-toc-finding-time-taken-in-best-case&quot;&gt;Finding Time Taken In Best Case&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#finding-time-taken-in-worst-case&quot; id=&quot;markdown-toc-finding-time-taken-in-worst-case&quot;&gt;Finding Time Taken In Worst Case&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#divide-and-conquer-principle&quot; id=&quot;markdown-toc-divide-and-conquer-principle&quot;&gt;Divide And Conquer Principle&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#merge-sort&quot; id=&quot;markdown-toc-merge-sort&quot;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;analysis-of-algorithms&quot;&gt;Analysis of Algorithms&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Analyzing&lt;/em&gt; an algorithm normally means predicting the &lt;em&gt;resources&lt;/em&gt; that the algorithm requires.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Occasionally, resources such as memory, communication band-
width, or computer hardware are of primary concern, but most often it is compu-
tational time that we want to measure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, let’s do this!&lt;/p&gt;

&lt;p&gt;(We assume here that the technology used for these algorithms here utilizes a generic one-processor, RAM (Random-Access Machine) model of computation)&lt;/p&gt;

&lt;h2 id=&quot;analysis-of-insertion-sort&quot;&gt;Analysis of Insertion Sort&lt;/h2&gt;

&lt;p&gt;We can say that the time taken by the Insertion Sort Algorithm must be proportional to the time taken, since sorting 1000 numbers is more tedious than sorting 3 numbers.&lt;/p&gt;

&lt;p&gt;Also, some implementations of insertion sort can be faster than the rest.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In general, since the time taken by an algorithm grows with the size of the input, it is traditional to describe the running time of a program as a function of the size of its input.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Therefore, we need to define “running time” and “size of input” more carefully.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best notion for input size depends on the problem being studied. For many problems, such as sorting or computing discrete Fourier transforms, the most natural measure is the number of items in the input — for example, the array size n for sorting. For many other problems, such as multiplying two integers, the best measure of input size is the total number of bits needed to represent the input in ordinary binary notation. Sometimes, it is more appropriate to describe the size of the input with two numbers rather than one. For instance, if the input to an algorithm is a graph, the input size can be described by the numbers of vertices and edges in the graph. We shall indicate which input size measure is being used with
each problem we study.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The running time of an algorithm on a particular input is the number of primitive operations or “steps” executed. It is convenient to define the notion of step so that it is as machine-independent as possible. For the moment, let us adopt the following view. A constant amount of time is required to execute each line of our
pseudocode. One line may take a different amount of time than another line, but we shall assume that each execution of the &lt;code class=&quot;MathJax_Preview&quot;&gt;{i}^{th}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;{i}^{th}&lt;/script&gt; line takes time &lt;code class=&quot;MathJax_Preview&quot;&gt;c_i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;c_i&lt;/script&gt; , where &lt;code class=&quot;MathJax_Preview&quot;&gt;c_i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;c_i&lt;/script&gt; is a constant. This viewpoint is in keeping with the RAM model, and it also reflects how the pseudocode would be implemented on most actual computers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;In the following discussion, our expression for the running time of Insertion Sort will evolve from a messy formula that uses all the statement costs &lt;code class=&quot;MathJax_Preview&quot;&gt;c_i&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;c_i&lt;/script&gt; to a
much simpler notation that is more concise and more easily manipulated. This simpler notation will also make it easy to determine whether one algorithm is more
efficient than another.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;We start by presenting the Insertion Sort procedure with the time “cost” of each statement and the number of times each statement is executed. For each
&lt;code class=&quot;MathJax_Preview&quot;&gt;j = 2,3,...,n&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;j = 2,3,...,n&lt;/script&gt;, where n = &lt;em&gt;A:length&lt;/em&gt;, we let &lt;code class=&quot;MathJax_Preview&quot;&gt;t_j&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;t_j&lt;/script&gt; denote the number of times the while loop test in line 5 is executed for that value of j . When a for or while loop exits in the usual way (i.e., due to the test in the loop header), the test is executed
one time more than the loop body. We assume that comments are not executable statements, and so they take no time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Chap2Part2/1.png&quot; alt=&quot;Insertion_sort_cost&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The total running time is the sum of running times for each statement executed. Therefore, the total time taken is:&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;T(n) = c_1n + c_2(n-1) + c_4(n - 1) + c_5\sum_{j=2}^{n} (t_j-1) + c_7\sum_{j=2}^{n}(t_j-1) + c_8(n-1)&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;T(n) = c_1n + c_2(n-1) + c_4(n - 1) + c_5\sum_{j=2}^{n} (t_j-1) + c_7\sum_{j=2}^{n}(t_j-1) + c_8(n-1)&lt;/script&gt;

&lt;p&gt;So let’s find the best and worst cases, using which we will gain some insight as to how this algorithm works.&lt;/p&gt;

&lt;h3 id=&quot;finding-time-taken-in-best-case&quot;&gt;Finding Time Taken In Best Case&lt;/h3&gt;
&lt;p&gt;The best case in Insertion Sort obviously happens when the array is already sorted.&lt;/p&gt;

&lt;p&gt;For all of &lt;code class=&quot;MathJax_Preview&quot;&gt;j = 2,3, \ldots,n&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;j = 2,3, \ldots,n&lt;/script&gt;, we find that &lt;code class=&quot;MathJax_Preview&quot;&gt;A[i]\leq key $ in line 5 of the algorithm when i has an initial value of j - 1. Thus,&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;A[i]\leq key $ in line 5 of the algorithm when i has an initial value of j - 1. Thus,&lt;/script&gt; t_j = 1 &lt;code class=&quot;MathJax_Preview&quot;&gt;for&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;for&lt;/script&gt; j = 2,3,/ldots,n $$ and the best-case running time is:&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;T(n) = c_1n + c_2(n-1) + c_4(n-1) + c_5(n-1) + c_8(n-1)
     = (c_1 + c_2 + c_4 + c_5 + c_8)n - (c_2 + c_4 + c_5 + c_8)&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;T(n) = c_1n + c_2(n-1) + c_4(n-1) + c_5(n-1) + c_8(n-1)
     = (c_1 + c_2 + c_4 + c_5 + c_8)n - (c_2 + c_4 + c_5 + c_8)&lt;/script&gt;

&lt;p&gt;Since we can express it as &lt;code class=&quot;MathJax_Preview&quot;&gt;an + b&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;an + b&lt;/script&gt; for constants a and b, it is a &lt;strong&gt;linear function&lt;/strong&gt; of n.&lt;/p&gt;

&lt;h3 id=&quot;finding-time-taken-in-worst-case&quot;&gt;Finding Time Taken In Worst Case&lt;/h3&gt;
&lt;p&gt;The worst time happens when the summation terms are at their maximum.&lt;/p&gt;

&lt;p&gt;Remembering that the summation terms can be simplified to:&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;\sum_{j=2}^{n} j = \dfrac{n(n+1)}{2} - 1&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{j=2}^{n} j = \dfrac{n(n+1)}{2} - 1&lt;/script&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;\sum_{j=2}^n (j-1) = \dfrac{n(n-1)}{2}&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;\sum_{j=2}^n (j-1) = \dfrac{n(n-1)}{2}&lt;/script&gt;

&lt;p&gt;We get:&lt;/p&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;T(n) = c_1n + c_2(n-1) + c_4(n-1) + c_5 \left(\dfrac{n(n+1)}{2} - 1\right) + c_6 \left(\dfrac{n(n-1)}{2}\right) + c_7 \left(\dfrac{n(n-1)}{2}\right) + c_8(n-1)&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;T(n) = c_1n + c_2(n-1) + c_4(n-1) + c_5 \left(\dfrac{n(n+1)}{2} - 1\right) + c_6 \left(\dfrac{n(n-1)}{2}\right) + c_7 \left(\dfrac{n(n-1)}{2}\right) + c_8(n-1)&lt;/script&gt;

&lt;pre class=&quot;MathJax_Preview&quot;&gt;&lt;code&gt;T(n) = \left(\dfrac{c_5}{2} + \dfrac{c_6}{2} + \dfrac{c_7}{2}\right)n^2 + \left(c_1 + c_2 + c_4 + \dfrac{c_5}{2} - \dfrac{c_6}{2} - \dfrac{c_7}{2} + c_8\right)n - (c_2 + c_4 + c_5 + c_8)&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;T(n) = \left(\dfrac{c_5}{2} + \dfrac{c_6}{2} + \dfrac{c_7}{2}\right)n^2 + \left(c_1 + c_2 + c_4 + \dfrac{c_5}{2} - \dfrac{c_6}{2} - \dfrac{c_7}{2} + c_8\right)n - (c_2 + c_4 + c_5 + c_8)&lt;/script&gt;

&lt;p&gt;We can express &lt;em&gt;this&lt;/em&gt; time as &lt;code class=&quot;MathJax_Preview&quot;&gt;an^2 + bn + c&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;an^2 + bn + c&lt;/script&gt; for constants a, b, and c.&lt;/p&gt;

&lt;p&gt;Therefore, it is a &lt;strong&gt;quadratic function&lt;/strong&gt; of n.&lt;/p&gt;

&lt;h2 id=&quot;divide-and-conquer-principle&quot;&gt;Divide And Conquer Principle&lt;/h2&gt;
&lt;p&gt;This principle is used for problems which have subproblems that can be easily solved.&lt;/p&gt;

&lt;p&gt;For example, if this sorting algorithm were to be fed only two elements at a time, it would be easy, right?&lt;/p&gt;

&lt;p&gt;Therefore, if we can break down a problem to small, easily solvable chunks, solving the problem becomes easier. Just make the real problem by solving all the bits and pieces!&lt;/p&gt;

&lt;p&gt;This is a complex skill, worth it’s own page (which I will give), but let’s see it in action first.&lt;/p&gt;

&lt;h3 id=&quot;merge-sort&quot;&gt;Merge Sort&lt;/h3&gt;
&lt;p&gt;This is the code for &lt;a href=&quot;http://cplusplus.happycodings.com/algorithms/code17.html&quot;&gt;mergesort&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Merge Sort

#include &amp;lt;iostream&amp;gt;
using namespace std;

int a[50];
void merge(int,int,int);
void merge_sort(int low,int high)
{
 if(low&amp;lt;high)
 {
  int mid = low + (high-low)/2; //This avoids overflow when low, high are too large
  merge_sort(low,mid);
  merge_sort(mid+1,high);
  merge(low,mid,high);
 }
}
void merge(int low,int mid,int high)
{
 int h,i,j,b[50],k;
 h=low;
 i=low;
 j=mid+1;

 while((h&amp;lt;=mid)&amp;amp;&amp;amp;(j&amp;lt;=high))
 {
  if(a[h]&amp;lt;=a[j])
  {
   b[i]=a[h];
   h++;
  }
  else
  {
   b[i]=a[j];
   j++;
  }
  i++;
 }
 if(h&amp;gt;mid)
 {
  for(k=j;k&amp;lt;=high;k++)
  {
   b[i]=a[k];
   i++;
  }
 }
 else
 {
  for(k=h;k&amp;lt;=mid;k++)
  {
   b[i]=a[k];
   i++;
  }
 }
 for(k=low;k&amp;lt;=high;k++) a[k]=b[k];
}
int main()
{
 int num,i;
 cout&amp;lt;&amp;lt;&quot;Please Enter THE NUMBER OF ELEMENTS you want to sort [THEN 
PRESS
ENTER]:&quot;&amp;lt;&amp;lt;endl;
 cin&amp;gt;&amp;gt;num;
 cout&amp;lt;&amp;lt;&quot;\n Now, Please Enter the ( &quot;&amp;lt;&amp;lt; num &amp;lt;&amp;lt;&quot; ) numbers (ELEMENTS) [THEN
PRESS ENTER]:&quot;&amp;lt;&amp;lt;endl;
 for(i=1;i&amp;lt;=num;i++)
 {
  cin&amp;gt;&amp;gt;a[i] ;
 }
 merge_sort(1,num);
 cout&amp;lt;&amp;lt;endl;
 cout&amp;lt;&amp;lt;&quot;So, the sorted list (using MERGE SORT) will be :&quot;&amp;lt;&amp;lt;endl;
 cout&amp;lt;&amp;lt;endl&amp;lt;&amp;lt;endl;

 for(i=1;i&amp;lt;=num;i++)
 cout&amp;lt;&amp;lt;a[i]&amp;lt;&amp;lt;&quot;  &quot;;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Try to understand it.
I’ll explain it in the next post.&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="Algorithms" /><summary type="html"></summary></entry><entry><title type="html">Introduction to Algorithms - Solutions - Chapter 2 (Part 1)</title><link href="http://localhost:4000/study/notes/2017/10/16/Chap2Sol/" rel="alternate" type="text/html" title="Introduction to Algorithms - Solutions - Chapter 2 (Part 1)" /><published>2017-10-16T02:00:00+05:30</published><updated>2017-10-16T02:00:00+05:30</updated><id>http://localhost:4000/study/notes/2017/10/16/Chap2Sol</id><content type="html" xml:base="http://localhost:4000/study/notes/2017/10/16/Chap2Sol/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-insertion-sort-c-program&quot; id=&quot;markdown-toc-the-insertion-sort-c-program&quot;&gt;The Insertion Sort C++ Program&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-bubble-sort-problem&quot; id=&quot;markdown-toc-the-bubble-sort-problem&quot;&gt;The Bubble Sort Problem&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#proving-the-correctness-of-bubble-sort&quot; id=&quot;markdown-toc-proving-the-correctness-of-bubble-sort&quot;&gt;Proving the Correctness of Bubble Sort&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-insertion-sort-c-program&quot;&gt;The Insertion Sort C++ Program&lt;/h2&gt;

&lt;p&gt;This is the program:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;


int main()
{
    int N; //Here, N is the size of the array
	
    int input_arr[N]; //input_arr is the array we use to store the input

        for(int i=0; i&amp;lt;N;i++)
        cin&amp;gt;&amp;gt;input_arr[i];

    for(int j=1;j&amp;lt;N;j++)
    {

     int key=input_arr[j];
     int i=j-1;

     while(i!&amp;lt;0&amp;amp;&amp;amp;input_arr[i]&amp;gt;key) //Here, we have to include the case when i becomes zero, becuase it does
    {
        input_arr[i+1]=input_arr[i];
        i--;
    }

      input_arr[i+1]=key;

    }

    for(int i=0;i&amp;lt;N;i++)
    cout&amp;lt;&amp;lt;input_arr[i]&amp;lt;&amp;lt;&quot;\n&quot;;

    return 0;


}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-bubble-sort-problem&quot;&gt;The Bubble Sort Problem&lt;/h2&gt;

&lt;p&gt;I wrote the program for bubble sort, so that it’d be easier to understand. Here it is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;algorithm&amp;gt;
using namespace std;
int main()
{

    int N; //Same as the earlier one
    cin&amp;gt;&amp;gt;N;
    int input_arr[N];

    for(int i=0; i&amp;lt;N;i++)
        cin&amp;gt;&amp;gt;input_arr[i];

    for(int j=1;j&amp;lt;N;j++)
    {

        for(int i=0;i&amp;lt;N;i++)
        {

        if(input_arr[i]&amp;gt;input_arr[j])
            swap(input_arr[i],input_arr[j]);

        }
    }
    for(int i=0;i&amp;lt;N;i++)
    cout&amp;lt;&amp;lt;input_arr[i]&amp;lt;&amp;lt;&quot;\n&quot;;

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;proving-the-correctness-of-bubble-sort&quot;&gt;Proving the Correctness of Bubble Sort&lt;/h3&gt;

&lt;p&gt;Initialisation: At the start, &lt;code class=&quot;highlighter-rouge&quot;&gt;j=1&lt;/code&gt;, which means &lt;code class=&quot;highlighter-rouge&quot;&gt;input_arr[1...j+1-1]&lt;/code&gt; contains 1 element. Therefore, it is necessarily sorted.&lt;/p&gt;

&lt;p&gt;Maintenance: At each loop of j, we get a sorted array from &lt;code class=&quot;highlighter-rouge&quot;&gt;input_arr[1...j+1-1]&lt;/code&gt;. Therefore, it is sorted.&lt;/p&gt;

&lt;p&gt;Termination: In the final loop of j, we get a sorted array from &lt;code class=&quot;highlighter-rouge&quot;&gt;input_arr[1...N+1-1]&lt;/code&gt;. Therefore, it is sorted. (Remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; in the code implies &lt;code class=&quot;highlighter-rouge&quot;&gt;N+1&lt;/code&gt; in the pseudocode, when you are dealing with array indices).&lt;/p&gt;

&lt;p&gt;Hence, the given algorithm is correct.&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="Algorithms" /><summary type="html"></summary></entry><entry><title type="html">Introduction to Algorithms - Chapter 2 (Part 1)</title><link href="http://localhost:4000/study/notes/2017/10/15/Chap2/" rel="alternate" type="text/html" title="Introduction to Algorithms - Chapter 2 (Part 1)" /><published>2017-10-15T10:30:00+05:30</published><updated>2017-10-15T10:30:00+05:30</updated><id>http://localhost:4000/study/notes/2017/10/15/Chap2</id><content type="html" xml:base="http://localhost:4000/study/notes/2017/10/15/Chap2/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#pseudocode&quot; id=&quot;markdown-toc-pseudocode&quot;&gt;Pseudocode&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#insertion-sort&quot; id=&quot;markdown-toc-insertion-sort&quot;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#correctness-of-insertion-sort&quot; id=&quot;markdown-toc-correctness-of-insertion-sort&quot;&gt;Correctness of Insertion Sort&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interesting-problemsalgorithms&quot; id=&quot;markdown-toc-interesting-problemsalgorithms&quot;&gt;Interesting Problems/Algorithms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#more-to-come&quot; id=&quot;markdown-toc-more-to-come&quot;&gt;More to come!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Let’s focus on the first problem introduced in the previous chapter, the sorting problem.&lt;/p&gt;

&lt;p&gt;Let us examine an algorithm to solve this problem, called insertion sort. We then take the help of this algorithm to lay the framework of analysis of other algorithms.&lt;/p&gt;

&lt;p&gt;But before that, we need to know what &lt;em&gt;pseudocode&lt;/em&gt; is.&lt;/p&gt;

&lt;h3 id=&quot;pseudocode&quot;&gt;Pseudocode&lt;/h3&gt;
&lt;p&gt;All algorithms in this book are expressed in something called &lt;em&gt;pseudocode&lt;/em&gt;. It is similar in many respects to C++ (Or C/Pascal if you’ve seen them, all of these language share similar syntax), the only difference being that sometimes the authors might swap actual code with English sentences to be more concise.&lt;/p&gt;

&lt;p&gt;One exception (that you will probably find in the pseudocode for insertion sort) is that when you write &lt;code class=&quot;highlighter-rouge&quot;&gt;A[j]&lt;/code&gt; in this language, it means “The &lt;code class=&quot;MathJax_Preview&quot;&gt;j^{th}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;j^{th}&lt;/script&gt; element of the array A”, when in C/C++ it means “The &lt;code class=&quot;MathJax_Preview&quot;&gt;{j-1}^{th}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;{j-1}^{th}&lt;/script&gt; element of the array A”.&lt;/p&gt;

&lt;p&gt;Since now we have the utmost basic stuff down, let’s get to the first algorithm.&lt;/p&gt;

&lt;h3 id=&quot;insertion-sort&quot;&gt;Insertion Sort&lt;/h3&gt;

&lt;p&gt;Input: A sequence of n numbers &lt;code class=&quot;MathJax_Preview&quot;&gt;\langle a_1, a_2, a_3, \ldots, a_n \rangle&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\langle a_1, a_2, a_3, \ldots, a_n \rangle&lt;/script&gt;
Output: A permutation (reordering) &lt;code class=&quot;MathJax_Preview&quot;&gt;\langle a'_1, a'_2, a'_3, \ldots, a'_n \rangle&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\langle a'_1, a'_2, a'_3, \ldots, a'_n \rangle&lt;/script&gt; of the input sequence such that &lt;code class=&quot;MathJax_Preview&quot;&gt;\langle a'_1 \leqslant a'_2 \leqslant a'_3 \leqslant \ldots a'_n \rangle&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;\langle a'_1 \leqslant a'_2 \leqslant a'_3 \leqslant \ldots a'_n \rangle&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Now, you have an array of n elements, and an algorithm that takes an array of n elements.&lt;/p&gt;

&lt;p&gt;Before checking what the pseudocode is, let’s check the wikipedia page for what it does. &lt;a href=&quot;https://en.wikipedia.org/wiki/Insertion_sort&quot;&gt;Insertion Sort&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So it takes an element, and puts it in its place by checking it with other elements of the array. This is done for every element in the array.&lt;/p&gt;

&lt;p&gt;The way it finds the place is by comparing the selected element of the array (called a key) with all the elements in the array.&lt;/p&gt;

&lt;p&gt;Let’s check the pseudocode of the Insertion Sort algorithm:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/CLRS2/insertion.png&quot; alt=&quot;inserton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this pseudocode, &lt;code class=&quot;MathJax_Preview&quot;&gt;A[j]&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;A[j]&lt;/script&gt; is the &lt;code class=&quot;MathJax_Preview&quot;&gt;{j}^{th}&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;{j}^{th}&lt;/script&gt; element of the array &lt;code class=&quot;MathJax_Preview&quot;&gt;A&lt;/code&gt;&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Let’s break the algorithm down:&lt;/p&gt;

&lt;p&gt;The first line introduces a &lt;strong&gt;for&lt;/strong&gt; loop, implying that the algorithm is gonna hold from elements 2 to the length of A.&lt;/p&gt;

&lt;p&gt;The second line initialises key to &lt;code class=&quot;highlighter-rouge&quot;&gt;A[j]&lt;/code&gt;, which is initialsed to &lt;code class=&quot;highlighter-rouge&quot;&gt;A[2]&lt;/code&gt; (again, keep in mind that &lt;code class=&quot;highlighter-rouge&quot;&gt;A[2]&lt;/code&gt; in pseudocode is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;A[1]&lt;/code&gt; in C/C++ code).&lt;/p&gt;

&lt;p&gt;You might ask this question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But dude, wait, doesn’t that &lt;em&gt;mean&lt;/em&gt; that this algorithm doesn’t look for the first element?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not exactly. The next few lines should convince you of it.&lt;/p&gt;

&lt;p&gt;I’ll take the rest of this algorithm as one chunk of code (you’ll understand soon)&lt;/p&gt;

&lt;p&gt;So, on the first try (or rather, &lt;em&gt;iteration&lt;/em&gt;) of the algorithm, &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; becomes equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;j-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next three lines just talk about how it is going to find the place for the key.&lt;/p&gt;

&lt;p&gt;Once the place for it is found, &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; is placed in the element next to the place found, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;i+1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;: Find out why key is placed head of &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; by one element.&lt;/p&gt;

&lt;p&gt;To have a more-or-less informal analysis of an algorithm, we need to know about loop invariants.&lt;/p&gt;

&lt;h2 id=&quot;correctness-of-insertion-sort&quot;&gt;Correctness of Insertion Sort&lt;/h2&gt;

&lt;p&gt;For a quick-and-dirty version of its meaning, a loop invariant is something that retains its value over one iteration of the program, that is used for continuing the algorithm smoothly.&lt;/p&gt;

&lt;p&gt;(Spoiler alert: The loop invariant for our implementation of insertion sort was &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;) 
The loop invariant helps to find if an algorithm is correct, or not.&lt;/p&gt;

&lt;p&gt;We must show three things about a loop invariant:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Initialization:&lt;/strong&gt; It is true prior to the first iteration of the loop.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Maintenance:&lt;/strong&gt; If it is true before an iteration of the loop, it remains true before the
next iteration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Termination:&lt;/strong&gt; When the loop terminates, the invariant gives us a useful property
that helps show that the algorithm is correct.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see how this holds for insertion sort:&lt;/p&gt;

&lt;p&gt;Initialization: Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;j=2&lt;/code&gt;, so the subarray &lt;code class=&quot;highlighter-rouge&quot;&gt;A[1...j-1]&lt;/code&gt;, therefore consists of A[1], and therefore, it is sorted.&lt;/p&gt;

&lt;p&gt;Therefore, the loop invariant holds good at initialization.&lt;/p&gt;

&lt;p&gt;Maintenance: This algorithm involves taking elements like &lt;code class=&quot;highlighter-rouge&quot;&gt;A[j-1]&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;A[j-2]&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;A[j-3]&lt;/code&gt; etc. and moving them one by one till the element behind it is smaller than it. Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;A[1...j]&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt; is the place it the element gets placed is sorted.&lt;/p&gt;

&lt;p&gt;(This part normally requires a good amount of math, but I am going to skip it, since this is an informal way to show correctness).&lt;/p&gt;

&lt;p&gt;Termination: The condition that makes this algorithm exit is &lt;code class=&quot;highlighter-rouge&quot;&gt;j=A.length&lt;/code&gt;, which means that &lt;code class=&quot;highlighter-rouge&quot;&gt;A[1...A.length]&lt;/code&gt; is sorted by the time this algorithm is over. &lt;em&gt;That&lt;/em&gt; is the whole algortihm.&lt;/p&gt;

&lt;h2 id=&quot;interesting-problemsalgorithms&quot;&gt;Interesting Problems/Algorithms&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Prove the same for &lt;a href=&quot;https://en.wikipedia.org/wiki/Bubble_sort&quot;&gt;Bubblesort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-to-come&quot;&gt;More to come!&lt;/h2&gt;

&lt;p&gt;I will be posting the code of insertion sort, as well as the exercise solutions in a separate post tomorrow. Till then, try them and keep tuned!&lt;/p&gt;</content><author><name>Nischay Hegde</name><email>hegdenischay@gmail.com</email></author><category term="Algorithms" /><summary type="html"></summary></entry></feed>